[{"title":"ClientBootstrap","type":0,"sectionRef":"#","url":"/axis/api/ClientBootstrap","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ClientBootstrap","url":"/axis/api/ClientBootstrap#functions","content":" "},{"title":"BootSequence​","type":1,"pageTitle":"ClientBootstrap","url":"/axis/api/ClientBootstrap#BootSequence","content":"&lt;/&gt; ClientBootstrap:BootSequence() → boolean Start up all client-related parts of Axis "},{"title":"CameraController","type":0,"sectionRef":"#","url":"/axis/api/CameraController","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"CameraController","url":"/axis/api/CameraController#functions","content":" "},{"title":"SetOffset​","type":1,"pageTitle":"CameraController","url":"/axis/api/CameraController#SetOffset","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; CameraController:SetOffset(Offset: vector3) → () Sets the player's camrea's offset. info Internally this sets the character's humanoid camera offset.  "},{"title":"GetPlayerCamera​","type":1,"pageTitle":"CameraController","url":"/axis/api/CameraController#GetPlayerCamera","content":"&lt;/&gt; CameraController:GetPlayerCamera() → Camera  Returns the player's camera "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/axis/docs/GettingStarted","content":"","keywords":""},{"title":"Installing​","type":1,"pageTitle":"Getting Started","url":"/axis/docs/GettingStarted#installing","content":""},{"title":"Wally​","type":1,"pageTitle":"Getting Started","url":"/axis/docs/GettingStarted#wally","content":"Axis is available on Wally (not very stable atm) here. "},{"title":"Using​","type":1,"pageTitle":"Getting Started","url":"/axis/docs/GettingStarted#using","content":""},{"title":"Booting​","type":1,"pageTitle":"Getting Started","url":"/axis/docs/GettingStarted#booting","content":"Booting up axis is as simple as 1 line of code. Keep in mind that axis does need to be booted from the client and the server. Firstly lets boot axis on the server: -- Startup.server.luau local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Axis = require(ReplicatedStorage.Packages.Axis) Axis:Boot():andThen(function() print(&quot;Axis booted&quot;) end):catch(warn)  Pressing play should result with &quot;Axis booted&quot; being printed in the output. Great we have booted axis from the server, now the client. The process is identical: -- Startup.client.luau local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Axis = require(ReplicatedStorage.Packages.Axis) Axis:Boot():andThen(function() print(&quot;Axis booted&quot;) end):catch(warn)  Having both these scripts should result in &quot;Axis booted&quot; being printed from the server and then the client in the output. "},{"title":"Notes​","type":1,"pageTitle":"Getting Started","url":"/axis/docs/GettingStarted#notes","content":"Axis is designed to work only in modules scripts. These 2 &quot;Startup&quot; scripts should be the only normal scripts in your game.Adding anything (like modules or controllers) to axis must come before booting!!! "},{"title":"ServerBootstrap","type":0,"sectionRef":"#","url":"/axis/api/ServerBootstrap","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"ServerBootstrap","url":"/axis/api/ServerBootstrap#functions","content":" "},{"title":"ApplyPlayerConfig​","type":1,"pageTitle":"ServerBootstrap","url":"/axis/api/ServerBootstrap#ApplyPlayerConfig","content":"&lt;/&gt; ServerBootstrap:ApplyPlayerConfig(Player: Player ) → () Applies the current player config to the given player  "},{"title":"ApplyCharacterConfig​","type":1,"pageTitle":"ServerBootstrap","url":"/axis/api/ServerBootstrap#ApplyCharacterConfig","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; ServerBootstrap:ApplyCharacterConfig(Player: Player ) → () Applies the current player config to the given player's character "},{"title":"Errors","type":1,"pageTitle":"ServerBootstrap","url":"/axis/api/ServerBootstrap##","content":"Type\tDescription&quot;Player currently doesn't have a character&quot;\tError happens when the function is called but the player's character does not yet exist  "},{"title":"BootSequence​","type":1,"pageTitle":"ServerBootstrap","url":"/axis/api/ServerBootstrap#BootSequence","content":"&lt;/&gt; ServerBootstrap:BootSequence() → bool Executes all the phases in order "},{"title":"Controllers","type":0,"sectionRef":"#","url":"/axis/docs/Controllers","content":"","keywords":""},{"title":"Writing Controllers​","type":1,"pageTitle":"Controllers","url":"/axis/docs/Controllers#writing-controllers","content":"Like modules controllers also have the Init and Start functions. Example: local MyController = Axis.CreateController { Name = &quot;MyController&quot;; } function MyController:Init() print(&quot;Init&quot;) end function MyController:Start() print(&quot;Start&quot;) end return MyController  Make sure to optimize the Init function to run as quickly as possible. Anything that doesn’t need to happen before other modules can use your module should be deferred to the Start function. Since all Init functions need to complete before any Start functions are called, avoid using blocking or yielding operations in Init, as they can significantly delay the startup process. danger The Controller's :Start() and :Init() functions are &quot;removed&quot; once Axis is booted. So calling the Start or Init functions will error! "},{"title":"Adding controllers to Axis​","type":1,"pageTitle":"Controllers","url":"/axis/docs/Controllers#adding-controllers-to-axis","content":"Like with modules you should have your controllers in a single folder to easily add it to Axis. Just like modules they need to be added before you call Axis:Boot(). Axis:AddControllersDeep(script.Parent.Controllers) -- Axis:AddControllersDeep(Path to controllers folder)  For other options of adding controllers to Axis see the API here. "},{"title":"PlayerController","type":0,"sectionRef":"#","url":"/axis/api/PlayerController","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PlayerController","url":"/axis/api/PlayerController#functions","content":" "},{"title":"GetPlayerModule​","type":1,"pageTitle":"PlayerController","url":"/axis/api/PlayerController#GetPlayerModule","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PlayerController:GetPlayerModule( ReturnAsModule: boolean-- Should it be returned as the actual module ) → ModuleScript | {[any]: any} Returns the player's PlayerModule  "},{"title":"DisableControls​","type":1,"pageTitle":"PlayerController","url":"/axis/api/PlayerController#DisableControls","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PlayerController:DisableControls() → () Disable the player's controls  "},{"title":"EnableControls​","type":1,"pageTitle":"PlayerController","url":"/axis/api/PlayerController#EnableControls","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PlayerController:EnableControls() → () Enable the player's controls  "},{"title":"GetCharacter​","type":1,"pageTitle":"PlayerController","url":"/axis/api/PlayerController#GetCharacter","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PlayerController:GetCharacter() → Model  Returns the player's cahracter "},{"title":"ModuleSystem","type":0,"sectionRef":"#","url":"/axis/api/ModuleSystem","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#types","content":" "},{"title":"Module​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#Module","content":"&lt;/&gt; interface Module { Name: string Client: table? AxisNetworking: any [any]: any }  "},{"title":"Properties​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#properties","content":" "},{"title":"Modules​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#Modules","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ModuleSystem.Modules: {[string]:any}}   "},{"title":"Started​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#Started","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ModuleSystem.Started: boolean  "},{"title":"Functions​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#functions","content":" "},{"title":"Create​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#Create","content":"&lt;/&gt; ModuleSystem.Create(ModuleDef: ModuleDefinition) → Module "},{"title":"Types","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem##","content":""},{"title":"​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#ModuleDefinition","content":"interface ModuleDefinition { Name: string Client: table? [any]: any }  Create a module  "},{"title":"GetModule​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#GetModule","content":"&lt;/&gt; ModuleSystem.GetModule(Name: string) → Module Returns the module with that name "},{"title":"Errors","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem##","content":"Type\tDescription&quot;Name must be a string&quot;\tThe passed name is not a string &quot;Could not find module ...&quot;\tA module does not exist with the passed name  "},{"title":"Add​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#Add","content":"&lt;/&gt; ModuleSystem:Add(ModuleScript: ModuleScript ) → () Add a module to the module list  "},{"title":"Exists​","type":1,"pageTitle":"ModuleSystem","url":"/axis/api/ModuleSystem#Exists","content":"&lt;/&gt; ModuleSystem:Exists(Name: string) → boolean Checks wether a module exists by name "},{"title":"ControllerSystem","type":0,"sectionRef":"#","url":"/axis/api/ControllerSystem","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#types","content":" "},{"title":"Controller​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#Controller","content":"&lt;/&gt; interface Controller { Name: string [any]: any }  "},{"title":"Properties​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#properties","content":" "},{"title":"Started​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#Started","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ControllerSystem.Started: boolean  "},{"title":"Functions​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#functions","content":" "},{"title":"CreateController​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#CreateController","content":"&lt;/&gt; ControllerSystem.CreateController(ControllerDef: ControllerDefinition) → Controller "},{"title":"Types","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem##","content":""},{"title":"​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#ControllerDefinition","content":"interface ControllerDefinition { Name: string [any]: any }  Create a controller  "},{"title":"GetController​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#GetController","content":"&lt;/&gt; ControllerSystem.GetController(Name: string) → Controller Get a controller with the given name  "},{"title":"GetModule​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#GetModule","content":"&lt;/&gt; ControllerSystem.GetModule(Name: string) → Module Get a Module with the given name  "},{"title":"Add​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#Add","content":"&lt;/&gt; ControllerSystem:Add(ControllerScript: ModuleScript ) → () Add a controller  "},{"title":"Exists​","type":1,"pageTitle":"ControllerSystem","url":"/axis/api/ControllerSystem#Exists","content":"&lt;/&gt; ControllerSystem:Exists(Name: string) → boolean Check if a controller with the given name exists "},{"title":"Modules","type":0,"sectionRef":"#","url":"/axis/docs/Modules","content":"","keywords":""},{"title":"Writing Modules​","type":1,"pageTitle":"Modules","url":"/axis/docs/Modules#writing-modules","content":"Modules have two key functions that are automatically called by Axis: Init and Start. This separation ensures that dependencies between modules are handled correctly. Init: This is where you initialize objects and set up any necessary preconditions. For example, if your module relies on certain events being created before other modules can use its functionality, those events should be created here. Start: This is where you retrieve and interact with other modules or perform any actions that depend on all modules being initialized. Example: local MyModule = Axis.CreateModule { Name = &quot;MyModule&quot;; Client = {}; } function MyModule:Init() print(&quot;My module Init&quot;) end function MyModule:Start() print(&quot;My module Start&quot;) end return MyModule  Make sure to optimize the Init function to run as quickly as possible. Anything that doesn’t need to happen before other modules can use your module should be deferred to the Start function. Since all Init functions need to complete before any Start functions are called, avoid using blocking or yielding operations in Init, as they can significantly delay the startup process. danger The module's :Start() and :Init() functions are &quot;removed&quot; once Axis is booted. So calling the Start or Init functions will error! "},{"title":"Adding modules to Axis​","type":1,"pageTitle":"Modules","url":"/axis/docs/Modules#adding-modules-to-axis","content":"Now that we have a simple test module we can add it to Axis. Ideally you should have 1 folder next to your startup script containing all the Module module scripts. Once this is true you can add this above the Axis:Boot function call: Axis:AddModulesDeep(script.Parent.Modules) -- Axis:AddModulesDeep(Path to modules folder)  For other options of adding modules to Axis see the API here. "},{"title":"Client-Server Communication​","type":1,"pageTitle":"Modules","url":"/axis/docs/Modules#client-server-communication","content":"Axis handles client / server communications in the same way as Knit. I recommend reading Knit's documentation to learn about client / server communication. "},{"title":"PlayerConfig","type":0,"sectionRef":"#","url":"/axis/api/PlayerConfig","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#types","content":" "},{"title":"PlayerConfigTable​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#PlayerConfigTable","content":"&lt;/&gt; type PlayerConfigTable = { DefaultWalkSpeed: number, LockFirstPerson: boolean }  "},{"title":"Properties​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#properties","content":" "},{"title":"DefaultWalkSpeed​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#DefaultWalkSpeed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PlayerConfig.DefaultWalkSpeed: number What the player's walkspeed should be set to when their character spawns  "},{"title":"LockFirstPerson​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#LockFirstPerson","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; PlayerConfig.LockFirstPerson: boolean Should the player be locked in first person mode "},{"title":"Functions​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#functions","content":" "},{"title":"GetConfig​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#GetConfig","content":"&lt;/&gt; PlayerConfig:GetConfig() → PlayerConfigTable Returns the player config as a table  "},{"title":"ApplyConfig​","type":1,"pageTitle":"PlayerConfig","url":"/axis/api/PlayerConfig#ApplyConfig","content":"&lt;/&gt; PlayerConfig:ApplyConfig(NewConfig: PlayerConfigTable) → () Apply a new config -- AxisBoot.server.luau local Config = Axis.ServerConfigs.PlayerConfig:GetConfig() Config.DefaultWalkSpeed = 3 Axis.ServerConfigs.PlayerConfig:ApplyConfig(Config)  "},{"title":"Axis","type":0,"sectionRef":"#","url":"/axis/api/Axis","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#properties","content":" "},{"title":"Promise​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#Promise","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Axis.Promise: Promise External promise library  "},{"title":"ServerConfigs​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#ServerConfigs","content":"This item only works when running on the server. Server This item is read only and cannot be modified. Read Only &lt;/&gt; Axis.ServerConfigs: {PlayerConfig: PlayerConfig} Contains all the configs  "},{"title":"Player​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#Player","content":"This item only works when running on the client. Client This item is read only and cannot be modified. Read Only &lt;/&gt; Axis.Player: Player   "},{"title":"Functions​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#functions","content":" "},{"title":"GetModule​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#GetModule","content":"&lt;/&gt; Axis.GetModule(Name: string) → Module Returns the module with that name  "},{"title":"CreateModule​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#CreateModule","content":"This item only works when running on the server. Server &lt;/&gt; Axis.CreateModule(ModuleDef: ModuleDefinition) → Module Returns a table to use for the module. This table contains some axis-related stuff local MyModule = Axis.CreateModule { Name = &quot;MyModule&quot;; Client = {}; } function MyModule:Init() print(&quot;Init&quot;) end function MyModule:Start() print(&quot;Start&quot;) end return MyModule   "},{"title":"CreateSignal​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#CreateSignal","content":"&lt;/&gt; Axis.CreateSignal() → SIGNAL_MARKER Creates a marker that will turn the key into a remote signal once Axis is booted local MyModule = Axis.CreateModule { Name = &quot;MyModule&quot;; Client = { -- Create the signal marker, which will turn into a -- RemoteSignal when Axis:Boot() is called: MySignal = Axis.CreateSignal(); }; }   "},{"title":"CreateUnreliableSignal​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#CreateUnreliableSignal","content":"&lt;/&gt; Axis.CreateUnreliableSignal() → UNRELIABLE_SIGNAL_MARKER Creates a marker that will turn the key into a unreliable remote signal once Axis is booted. Unreliable Events Internally, this uses UnreliableRemoteEvents, which allows for network communication that is unreliable and unordered. This is useful for events that are not crucial for gameplay, since the delivery of the events may occur out of order or not at all. See the documentation for UnreliableRemoteEvents for more info.  "},{"title":"CreateProperty​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#CreateProperty","content":"&lt;/&gt; Axis.CreateProperty(InitialValue: any) → PROPERTY_MARKER Returns a marker that will turn the key into a remote property one Axis is booted. An initial value can be passed. RemoteProperties are great for replicating data to all of the clients. Different data can also be set per client. local MyModule = Axis.CreateModule { Name = &quot;MyModule&quot;, Client = { -- Create the property marker, which will turn into a -- RemoteProperty when Axis:Boot() is called: MyProperty = Axis.CreateProperty(&quot;HelloWorld&quot;); }, }   "},{"title":"CreateController​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#CreateController","content":"This item only works when running on the client. Client &lt;/&gt; Axis.CreateController(ControllerDef: Types.ControllerDefinition) → Controller Wrapper function for controller system function local MyController = Axis.CreateController { Name = &quot;MyController&quot;; } function MyController:Init() print(&quot;Init&quot;) end function MyController:Start() print(&quot;Start&quot;) end return MyController   "},{"title":"GetController​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#GetController","content":"This item only works when running on the client. Client &lt;/&gt; Axis.GetController(Name: string) → Controller Wrapper function for controller system  "},{"title":"AddModule​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#AddModule","content":"This item only works when running on the server. Server &lt;/&gt; Axis:AddModule(PathToModule: ModuleScript ) → () Wrapper function for module system function  "},{"title":"AddModules​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#AddModules","content":"This item only works when running on the server. Server &lt;/&gt; Axis:AddModules(Parent: Folder ) → () Adds the modules within the parent. caution This only adds children, use AddModulesDeep to add descendants  "},{"title":"AddModulesDeep​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#AddModulesDeep","content":"This item only works when running on the server. Server &lt;/&gt; Axis:AddModulesDeep(Parent: Folder ) → () Adds any modules within the parent folder, this includes in sub-folders  "},{"title":"AddController​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#AddController","content":"This item only works when running on the client. Client &lt;/&gt; Axis:AddController(ControllerScript: ModuleScript ) → () Wrapper function for controller system function  "},{"title":"AddControllers​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#AddControllers","content":"This item only works when running on the client. Client &lt;/&gt; Axis:AddControllers(Parent: Folder ) → () Adds the controllers within the parent. caution This only adds children, use AddControllersDeep to add descendants  "},{"title":"AddControllersDeep​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#AddControllersDeep","content":"This item only works when running on the client. Client &lt;/&gt; Axis:AddControllersDeep(Parent: Folder ) → () Adds any controllers within the parent folder, this includes in sub-folders  "},{"title":"Boot​","type":1,"pageTitle":"Axis","url":"/axis/api/Axis#Boot","content":"&lt;/&gt; Axis:Boot() → boolean-- Was boot successful Start core systems and initialize all core modules "},{"title":"Axis","type":0,"sectionRef":"#","url":"/axis/docs/intro","content":"","keywords":""},{"title":"Pitch​","type":1,"pageTitle":"Axis","url":"/axis/docs/intro#pitch","content":"Axis is a framework designed to simplify and enhance the development process for creating large-scale modular systems in Roblox. It provides developers with tools to build efficient, reusable components while maintaining flexibility and scalability. It is mainly designed for games which try to make Roblox games look as realistic as possible. "},{"title":"Core goals​","type":1,"pageTitle":"Axis","url":"/axis/docs/intro#core-goals","content":"Modularity: Everything in Axis is modular, meaning you can easily swap out, replace, or upgrade parts of your system without breaking functionality.Scalability: Axis is built with performance and scalability in mind, ensuring it can handle both small projects and large-scale applications.Efficiency: By focusing on simplifying complex tasks and offering out-of-the-box solutions, Axis reduces the time needed to develop and maintain robust systems.Ease of Use: Whether you’re a beginner or an expert, Axis is designed to be easy to integrate, with clear documentation and a low learning curve. "},{"title":"Why axis​","type":1,"pageTitle":"Axis","url":"/axis/docs/intro#why-axis","content":"Axis was born out of the need for a more structured, reliable, and scalable framework. It tackles the common issues developers face when managing large, complex systems and provides solutions to ensure your project remains organized and efficient throughout its lifecycle. "}]